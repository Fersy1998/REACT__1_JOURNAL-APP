import configureStore from 'redux-mock-store'; //ES6 modules
import thunk from 'redux-thunk';
import { startNewNote, startSaveNotes, startUploading } from '../../actions/notes';
import { db } from '../../firebase/firebase-config';
import { fileUpload } from '../../helpers/fileUpload';
import { types } from '../../types/types';
const middlewares = [thunk];
const mockStore = configureStore(middlewares);


jest.setTimeout(10000)
jest.mock('../../helpers/fileUpload', ()=>({
    fileUpload:()=>{
        return 'https://holamundo.png';
    }
}));


const store=mockStore({
    auth: {
        uid: 'j3sUsRiXSwZStTQ52OCGI3OokbK2',
        name: 'Xin'
      }
    ,
    notes:{
        id:'Bezkf2QMDcxB0xtbHowD',
        title:'Hola',
        body:'mundo'
    }
    }
)

describe('Pruebas en notes.js', ()=>{
    test('should create a new note', async() => { 
        await store.dispatch(startNewNote());
        const actions=store.getActions();
        //console.log(actions);
        
        expect(actions[0]).toEqual({
            type:types.notesActive,
            payload:{
                id:expect.any(String),
                title:'',
                body:'',
                date:expect.any(Number),
                url:''
            }
        
        });
        /*
        expect(actions[1]).toEqual({
            type:types.notesAddNew,
            payload:{
                id:expect.any(String),
                title:'',
                body:'',
                date:expect.any(Number),
                url:''
            }
        
        })*/
        const docId=actions[0].payload.id;
        await db.doc(`/j3sUsRiXSwZStTQ52OCGI3OokbK2/journal/notes/${docId}`).delete();
    })
    /*
    test('should save a note', async() => { 
        /*
        const note={
            id:'Bezkf2QMDcxB0xtbHowD',
            title:'Kloe',
            body:'Nada'
        }
        await store.dispatch(startSaveNotes({
            id:'Bezkf2QMDcxB0xtbHowD',
            title:'Kloe Mar',
            body:'Nada'
        }));
       
        const docRef=await db.doc(`/j3sUsRiXSwZStTQ52OCGI3OokbK2/journal/notes/${note.id}`).get();
        expect(docRef.data().title).toBe('K');
    })*/
    test('should startUploading shoul update the url', async() => { 
        const file= new File([],'foto.jpg');
        store.dispatch(startUploading(file));
    })
    
}) 